@page "/server-logs"
@attribute [Authorize]
@inherits AuthComponentBase

@inject IDataService DataService
@inject IToastService ToastService
@inject IJsInterop JsInterop

<h3 class="mb-3">Server Logs</h3>


@if (User?.IsAdministrator == true)
{
    <div class="d-flex justify-content-end align-items-center">

        <div class="form-row align-items-center">
            <div class="col-auto my-1">
                <button class="btn btn-danger" type="button" @onclick="ClearAllLogs">
                    Delete Logs
                </button>
            </div>
            <div class="col-auto my-1">
                <button class="btn btn-primary"
                    onclick="location.assign('/API/ServerLogs/Download')">
                    Download Logs
                </button>
            </div>
            <div class="col-auto my-1">
                <button class="btn btn-primary"
                    onclick="location.assign('/API/ScriptResults')">
                    Download Script History
                </button>
            </div>
        </div>

        <div class="ml-2 form-row align-items-center">
            <div class="col-auto my-1">
                <select class="custom-select mr-sm-2" id="inlineFormCustomSelect" @bind="_eventType">
                    <option value="">All</option>
                    @foreach (var eventType in Enum.GetValues(typeof(EventType)))
                    {
                        <option @key="eventType" value="@eventType">@eventType</option>
                    }
                </select>
            </div>
            <div class="col-auto my-1">
                
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text search-rounded"></span>
                    </div>
                    <input type="search" class="form-control" @bind="_messageFilter" placeholder="Search">
                </div>

            </div>
            <div class="col-auto my-1">
                <div class="form-group">
                    <input type="date" class="form-control rounded" @bind="_fromDate">
                </div>
            </div>
            <div class="col-auto my-1">
                To
            </div>
            <div class="col-auto my-1">
                <div class="form-group">
                    <input type="date" class="form-control rounded" @bind-value="_toDate">
                </div>
            </div>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Timestamp</th>
                    <th>Message</th>
                    <th>Source</th>
                    <th>Stack Trace</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var eventLog in FilteredLogs)
                {
                    <tr @key="eventLog">
                        <td>@eventLog.EventType</td>
                        <td>@eventLog.TimeStamp</td>
                        <td>@eventLog.Message</td>
                        <td>@eventLog.Source</td>
                        <td>@eventLog.StackTrace</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <h5 class="text-muted">Only organization administrators can view this page.</h5>
}

@code {
    private readonly List<EventLog> _filteredLogs = new();
    private EventType? _eventType;
    private string _messageFilter;
    private DateTimeOffset _fromDate = DateTimeOffset.Now.AddDays(-7);
    private DateTimeOffset _toDate = DateTimeOffset.Now;



    private IEnumerable<EventLog> FilteredLogs
    {
        get
        {
            return DataService.GetEventLogs(User.UserName,
                   _fromDate,
                   _toDate,
                   _eventType,
                   _messageFilter);
        }
    }

    private async Task ClearAllLogs()
    {
        var result = await JsInterop.Confirm("Are you sure you want to delete all logs?");
        if (result)
        {
            await DataService.ClearLogs(User.UserName);
            ToastService.ShowToast("Logs deleted.");
        }
    }

}
